[build-system]
requires = ["uv_build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "safecheck"
module-root = "."

[project]
name = "safecheck"
version = "0.5.3"
description = "Utilities for typechecking, shapechecking and dispatch."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "David Muhr", email = "muhrdavid+github@gmail.com" }]
homepage = "https://github.com/davnn/safecheck"
repository = "https://github.com/davnn/safecheck"
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Typing :: Typed"
]

dependencies = [
    "beartype>0.15",
    "jaxtyping>=0.2",
    "typing-extensions>=4.0"
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.9.0",
    "coverage>=7.11.0",
    "genbadge[coverage]>=1.1.2",
    "hypothesis>=6.142.4",
    "jax>=0.6.2",
    "line-profiler>=5.0.0",
    "notebook>=7.4.7",
    "numpy>=2.2.6",
    "pre-commit>=4.3.0",
    "pyright[nodejs]>=1.1.407",
    "pytest>=8.4.2",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "ruff>=0.14.2",
    "torch>=2.9.0",
    "typing-extensions>=4.15.0",
]

[tool.uv.sources]
torch = [{ index = "pytorch-cpu" }]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.black]
target-version = ["py39"]
line-length = 120
color = true
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.ruff]
line-length = 120
extend-exclude = ["tests/", ".github/"]
force-exclude = true
lint.select = ["ALL"]
lint.ignore = [
    "D203",
    "D213",
    "B905",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pyright]
include = ["safecheck"]
reportPrivateImportUsage = true
reportConstantRedefinition = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = "warning"
reportInconsistentConstructor = true
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = false
reportOverlappingOverload = true
reportPrivateUsage = true
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedExpression = true
reportUnusedCallResult = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportCallInDefaultInitializer = true
reportImplicitStringConcatenation = false
reportMissingSuperCall = true
reportPropertyTypeMismatch = true
reportUninitializedInstanceVariable = true

[tool.pytest.ini_options]
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
addopts = ["--strict-markers", "--tb=short", "--cov-report=html", "--cov-report=xml"]
filterwarnings = ["ignore::UserWarning"]
pythonpath = ["."]

[tool.coverage.run]
source = ["tests"]
branch = true

[tool.coverage.paths]
source = ["safecheck"]

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "@overload"]
